{{#operations}}
    {{#operation}}
// +build api_{{operationIdSnakeCase}}
    {{/operation}}
{{/operations}}

package main

import (
    "log"
    "fmt"
	"flag"
	"net/http"
    "encoding/json"
    "github.com/spf13/viper"

{{#operations}}
    {{#operation}}
        {{#authMethods}}
            {{#isApiKey}}
    "context"
    "encoding/base64"
    "crypto/x509"
    "encoding/pem"
    "gopkg.in/square/go-jose.v2"
    "github.com/auth0-community/go-auth0"
            {{/isApiKey}}
        {{/authMethods}}
    {{/operation}}
{{/operations}}

	"github.com/GoogleCloudPlatform/cloud-functions-go/nodego"

{{#operations}}
    . "{{package}}/models"
{{/operations}}
)

func init() {
    nodego.OverrideLogger()
}

var (
    fx http.HandlerFunc
    operation = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
{{#operations}}
    {{#operation}}
        // ###############################################################################
        {{#allParams}}
        var {{paramName}} {{dataType}}
        {{/allParams}}
        {{#hasQueryParams}}
        queryValues := r.URL.Query()
        {{/hasQueryParams}}
        {{#queryParams}}
        {{paramName}} = queryValues.Get("{{paramName}}").({{dataType}}))
        {{/queryParams}}
        {{#bodyParam}}
        {{^isEnum}}{{^isPrimitiveType}}{{^isDateTime}}
            decoder := json.NewDecoder(r.Body)
            err := decoder.Decode(&{{paramName}})
            if err != nil {
            w.WriteHeader(http.StatusBadRequest)
            w.Write([]byte(err.Error()))
            return
            }
        {{/isDateTime}}{{/isPrimitiveType}}{{/isEnum}}
        {{/bodyParam}}
        {{#returnType}}
        var r {{{returnType}}}
        {{/returnType}}
        {{#returnType}}r, {{/returnType}}err = {{operationId}}({{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}})
        if err != nil {
            w.WriteHeader(http.StatusInternalServerError)
            w.Write([]byte(err.Error()))
            return
        }
        {{#returnType}}
        rs, err := json.Marshal(&r)
        w.WriteStatus(http.StatusOK)
        w.Write(rs)
        {{/returnType}}
    {{/operation}}
{{/operations}}
    })
)

func LoadPublicKey(data []byte) (interface{}, error) {
input := data

block, _ := pem.Decode(data)
if block != nil {
input = block.Bytes
}

// Try to load SubjectPublicKeyInfo
pub, err0 := x509.ParsePKIXPublicKey(input)
if err0 == nil {
return pub, nil
}

cert, err1 := x509.ParseCertificate(input)
if err1 == nil {
return cert.PublicKey, nil
}

return nil, fmt.Errorf("square/go-jose: parse error, got '%s' and '%s'", err0, err1)
}

func main() {
	flag.Parse()

    // load config from file
    viper.SetConfigName("config")
    viper.AddConfigPath("./supportingFiles")
    err := viper.ReadInConfig()
    if err != nil {
        log.Println("Failed to read configuration file")
        return
    }


{{#operations}}
    {{#operation}}
        // ###############################################################################
        {{#authMethods}}
            {{#isApiKey}}
            if ("{{name}}" == "Auth0") {
                key, _ := base64.StdEncoding.DecodeString(viper.Get("AUTH0_PUBLIC_KEY_B64").(string))
                secret, _ := LoadPublicKey(key)
                secretProvider := auth0.NewKeyProvider(secret)
                audience := viper.Get("AUTH0_CLIENT_ID").(string)

                configuration := auth0.NewConfiguration(secretProvider, []string{ audience, {{#scopes}}"{{scope}}"{{#hasMore}},{{/hasMore}}{{/scopes}} }, viper.Get("AUTH0_DOMAIN").(string), jose.RS256)
                validator := auth0.NewValidator(configuration, nil)

            fx = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
                    token, err := validator.ValidateRequest(r)
                    if err != nil {
                        log.Printf("Failed to Authenticate request %v", err)
                    } else {
                        ctx := context.WithValue(r.Context(), "token", token)
                        operation(w, r.WithContext(ctx))
                    }
                })
            }
            {{/isApiKey}}
        {{/authMethods}}
        {{^hasAuthMethods}}
            fx := operation
        {{/hasAuthMethods}}
    {{/operation}}
{{/operations}}

	http.HandleFunc(nodego.HTTPTrigger, fx)

	nodego.TakeOver()
}